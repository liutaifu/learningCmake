1、在mac上成功使用Android NDK生成独立交叉编译工具链，编译验证so和可执行文件，在Android device上验证

2019/06/18
验证如下：
  1、将linuxMain push到Android device(N),修改文件可执行权限，运行linuxMain报如下错误
    1.1、/system/bin/sh: ./linuxMain: can't execute: Permission denied                   没有权限
    1.2、CANNOT LINK EXECUTABLE "./linuxMain": library "libLinuxTest.so" not found       缺少依赖so库
         Aborted
  
    1.3、CANNOT LINK EXECUTABLE "./linuxMain": library "libc++_shared.so" not found      缺少依赖so库
         Aborted
         建议方案：1、降低 NDK 版本, 比如降到13
                  2、解决方案：在 Application.mk 中添加 APP_STL := c++_shared，官方是这么说的：
                  默认情况下，NDK 构建系统为 Android 系统提供的最小 C++ 运行时库 (system/lib/libstdc++.so) 
                  提供 C++ 标头。 此外，它随附您可以在自己的应用中使用或链接的替代 C++ 实现。请使用 APP_STL 选择其中一个。
                  3、You used ndk >16, I assume?Revert to ndk 14b, rince, repeat 
                     Well, looks like you specified libc++ as the STL in the ndk toolchain command.
                  4、编译release版本的就不用依赖这些额外的so库


2019/06/19
今日将libc++_shared.so push到/vendor/lib/再次执行，程序运行正常。check success！

2、在mac上编译opencv代码，部分头文件路径查找不到，分析中
3、在mac上使用cmake编译opencv代码，可以正常生成文件，未报路径问题。
4、需要研究cmake如何配置交叉编译环境，实现opencv的编译
5、参考交叉编译文档中配置环境变量，然后编译opencv代码，待验证。
需要解决2,3,4,5中的问题，如何使用cmake编译opencv

今日验证，使用如下cmake配置编译，缺少opencv的函数定义，可以编译Android系统可运行程序。
这个是用的opencv是使用brew install的方式安装的。但是使用cmake编译会报错。


6、使用cmake 交叉编译opencv
   opencv支持多平台，针对所需平台需要单独编译，并使用对应的交叉编译工具。
  6.1、参考opencv官方文档
      https://docs.opencv.org/master/d0/d76/tutorial_arm_crosscompile_with_cmake.html
  6.2、再开始编译之前，先把编译器切换成交叉编译工具，此处是重点！！！

  6.3、如下是交叉编译配置cross.cmake文件
SET(CROSS_COMPILE 1)
IF(CROSS_COMPILE)

SET(CROSS_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR arm)
SET(TOOLCHAIN_DIR "/home2/xxxx/code/arm-linux/arm-linux-androideabi")
SET(TOOLCHAIN_INCLUDE ${TOOLCHAIN_DIR}/sys-root/usr/include
                                ${TOOLCHAIN_DIR}/include)
SET(TOOLCHAIN_LIB ${TOOLCHAIN_DIR}/sys-root/usr/lib
                                ${TOOLCHAIN_DIR}/lib )

SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_DIR}/bin/arm-linux-androideabi-g++)
SET(CMAKE_C_COMPILER ${TOOLCHAIN_DIR}/bin/arm-linux-androideabi-gcc)
SET(GNU_FLAGS "-mfpu=vfp -fPIC")
SET(CMAKE_CXX_FLAGS ${GNU_FLAGS})
SET(CMAKE_C_FLAGS ${GNU_FLAGS})

SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_DIR})

#FIND_PACKAGE(OpenCV REQUIRED)
include_directories(/home2/xxxx/code/opencv/modules/core/include/)
include_directories(/home2/xxxx/code/opencv/modules/flann/include/)
include_directories(/home2/xxxx/code/opencv/modules/dnn/include/)
include_directories(/home2/xxxxx/code/opencv/modules/ml/include/)
include_directories(/home2/xxxx/code/opencv/modules/video/include/)
include_directories(/home2/xxxx/code/opencv/modules/stitching/include/)
include_directories(/home2/xxxx/code/opencv/modules/objdetect/include/)
include_directories(/home2/xxxx/code/opencv/include/)

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
ENDIF(CROSS_COMPILE)



7、如果使用第三方库，该如何编译
8、opencv至此CUDA，如何导入
9、编译中遇到的error整理
  9.1、#error "OpenCV 4.x+ requires enabled C++11 support"，C++使用的是11版本以下，修改如下参数
      set(CMAKE_CXX_STANDARD 14)

10、如何卸载opencv
  10.1.查询已装opencv版本
  $pkg-config --modversion opencv
  10.2.卸载已装opencv
  $cd /opencv_install_dir/build(release)/
  $sudo make uninstall
  $cd ..
  $rm -rf build(release)/
  $cd ..
  $rm -rf opencv
  10.3.卸载残留
  $ rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv*
  $ cd /usr
  $ find . -name "*opencv*" | xargs sudo rm -rf
11、使用Android.mk加载第三方so库
