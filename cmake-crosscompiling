1)将环境变量配置写成一个 .cmake 文件，
2)需要交叉编译时 include ，
3)或者直接把这些配置写到 CMakeLists.txt 文件的开始位置
  include (cross.cmake)

参考一个针对arm平台的交叉编译环境变量配置

SET(CROSS_COMPILE 1)
IF(CROSS_COMPILE) 
  
SET(CMAKE_SYSTEM_NAME Linux)
SET(TOOLCHAIN_DIR "/home/xxxx/Tools/opt/FriendlyARM/toolschain/4.5.1")

set(CMAKE_CXX_COMPILER ${TOOLCHAIN_DIR}/bin/arm-linux-g++)
set(CMAKE_C_COMPILER   ${TOOLCHAIN_DIR}/bin/arm-linux-gcc)
set(GNU_FLAGS "-mfpu=vfp -fPIC")
set(CMAKE_CXX_FLAGS "${GNU_FLAGS} ")
set(CMAKE_C_FLAGS "${GNU_FLAGS}  ")

SET(CMAKE_FIND_ROOT_PATH  ${TOOLCHAIN_DIR}
 ${TOOLCHAIN_DIR}/arm-none-linux-gnueabi/include
 ${TOOLCHAIN_DIR}/arm-none-linux-gnueabi/lib )

include_directories(/usr/local/Trolltech/QtEmbedded-4.8.5-arm/include/)
include_directories(/home/xxxx/Downloads/boost_1_49_0_arm)
link_directories(/home/xxxx/Downloads/boost_1_49_0_arm/stage/lib)
link_directories(/home/xxxx/Downloads/ffmpeg-1.0.8-arm/ffmpeglib/)
link_directories(/usr/local/Trolltech/QtEmbedded-4.8.5-arm/lib)
link_directories(/home/xxxx/Downloads/live_arm/BasicUsageEnvironment/)
link_directories(/home/xxxxx/Downloads/live_arm/groupsock/)
link_directories(/home/xxxxx/Downloads/live_arm/liveMedia/)
link_directories(/home/xxxx/Downloads/live_arm/UsageEnvironment/)
  
ENDIF(CROSS_COMPILE)

# 添加判断条件，在编译时使用如下命令才会进行交叉编译，否则调用本机编译程序，如果有多个目标平台添加相关判断即可
# cmake -DCMAKE_BUILD_TARGET=aaaa ..
if(CMAKE_BUILD_TARGET STREQUAL aaaa)
    # 设置toolchain文件路径
    set(CMAKE_TOOLCHAIN_FILE 
        ${CMAKE_SOURCE_DIR}/cmake/toolschain/aaaa.cmake)
endif()

aaaa.cmake如下

# 设置目标系统
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)

# 设置工具链目录
set(TOOL_CHAIN_DIR /opt/FriendlyARM/toolschain/4.5.1)
set(TOOL_CHAIN_INCLUDE 
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/sys-root/usr/include
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/include
    )
set(TOOL_CHAIN_LIB 
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/sys-root/usr/lib
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/lib
    )

# 设置编译器位置
set(CMAKE_C_COMPILER "arm-linux-gcc")
set(CMAKE_CXX_COMPILER "arm-linux-g++")

# 设置Cmake查找主路径
set(CMAKE_FIND_ROOT_PATH ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# 只在指定目录下查找库文件
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
# 只在指定目录下查找头文件
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
# 只在指定目录下查找依赖包
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

include_directories(
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/include
    ${TOOL_CHAIN_DIR}/arm-none-linux-gnueabi/sys-root/usr/include
    )

set(CMAKE_INCLUDE_PATH 
    ${TOOL_CHAIN_INCLUDE}
    )

set(CMAKE_LIBRARY_PATH 
    ${TOOL_CHAIN_LIB}
    )
